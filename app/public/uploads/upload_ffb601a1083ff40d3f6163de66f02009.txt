import React, { Component } from 'react';
import {View, Alert, Text, TextInput, Switch, ScrollView, Image, TouchableOpacity, FlatList} from 'react-native'
import {Header, DlgView, MessageDialog, MorePopWidows, TabNavigatorItems, TabIcon, DetailCell, Button, SpacingView, Separator, TextInputLine, NavigationItem} from '../../widget'
import {formatMoney, uuid, px2dp, dateFtt, chkPrice, getAfterRoundMoney, addDays} from '../../utils/utils'
import {getPinYin} from '../../utils/py'
import color from '../../widget/color'
import Toast from '@remobile/react-native-toast'
import {SearchBar, Grid, SegmentedControl, Modal } from 'antd-mobile-rn';
import * as antdMobile from 'antd-mobile-rn';
import XgRequest from '../../config/xgRequest';
import styles from './styles'
import SafeAreaView from 'react-native-safe-area-view'

// redux 依赖
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as actionCreators from '../../redux/actions';
import { Heading2, Heading3  } from '../../widget/Text';

class kuneidiaoboBook extends Component {
  static navigationOptions = {
    // title: '销售开单'
    header: null,
  };

  constructor(props) {
    super(props);
    this.navigation = props.navigation;
    this.state = {
      titleName: '库内调拨',
      posItem : this.navigation.state.params.posItem,
      inPosItem:this.navigation.state.params.posItem, //进批次
      outPosItem: this.navigation.state.params.posItem, //入批次
      showInLotNumDlg:false,
      showOutLotNumDlg:false,
      dlgLotNums: [],
      inventory: null,           //剩余库存
    };
    
  }

  componentDidMount() {
    
  }

 
  /**搜索批次号 */
  async searchInLotNum() {
    if (this.props.branch.branchSettlementType === '先进先出' && '购销' === this.state.posItem.itemMode) {
      return;
    }

    if (!this.state.posItem.supplierNum && '代销' === this.state.posItem.itemMode) {
      Toast.showShortCenter('请先选择货主')
      return;
    }
    //TODO
    try {
      if ('购销' === this.state.posItem.itemMode) {
        let urlPar = {
          branchNum: this.props.branch.branchNum,
          storehouseNum: this.props.systemParams.storehouseNum,
          itemNums: [this.state.posItem.itemNum]
        }
        let res = await XgRequest.inventoryFind(urlPar, this.props)
        console.log(res)
        if (res.code === '0'){
          // console.log(JSON.parse(res.content), JSON.parse(res.content)[0].inventoryMirrorBatchDetailDTOs)
          if (JSON.parse(res.content) && JSON.parse(res.content).length > 0) {
            this.setState({
              showInLotNumDlg: true,
              dlgLotNums: JSON.parse(res.content)[0].inventoryMirrorBatchDetailDTOs
            })

            // if (Platform.OS === 'android') {
            // }
          } else {
            Toast.showShortCenter('该商品未查询到批次')
          }
        } else {
          Toast.showShortCenter(res.msg);
        }
      } else {
        let urlPar = {
          branchNum: this.props.branch.branchNum,
          supplierNums: [this.state.posItem.supplierNum],
          itemNum: this.state.posItem.itemNum,
          departmentNums: this.props.systemParams.departmentNum ? [this.props.systemParams.departmentNum] : null,
        }
        let res = await XgRequest.listItemLotNum(urlPar, this.props);
        if (res.code === '0'){
          console.log('代销批次', JSON.parse(res.content), urlPar)
          let dlgLotNums = [];
          if (this.props.systemParams.agentLockSellerEnable && JSON.parse(res.content) && JSON.parse(res.content).length > 0) {
            for (let i = 0; i < JSON.parse(res.content).length; i++) {
              let dlgLotNum = JSON.parse(res.content)[i]
              if (dlgLotNum.agentOrderDetailSeller === this.props.systemParams.branchUserDTO.userDisplayName) {
                dlgLotNums.push(dlgLotNum)
              }
            }
          } else {
            dlgLotNums = JSON.parse(res.content)
          }

          console.log('dlgLotNums', dlgLotNums)
          if (dlgLotNums && dlgLotNums.length > 0) {
            this.setState({
              showInLotNumDlg: true,
              dlgLotNums: dlgLotNums
            })

          }
        } else {
          Toast.showShortCenter(res.msg);
        }
      }
    } catch (e) {
      console.log(e);
    }
  }

  async searchOutLotNum() {
    if (this.props.branch.branchSettlementType === '先进先出' && '购销' === this.state.posItem.itemMode) {
      return;
    }

    if (!this.state.posItem.supplierNum && '代销' === this.state.posItem.itemMode) {
      Toast.showShortCenter('请先选择货主')
      return;
    }
    //TODO
    try {
      if ('购销' === this.state.posItem.itemMode) {
        let urlPar = {
          branchNum: this.props.branch.branchNum,
          storehouseNum: this.props.systemParams.storehouseNum,
          itemNums: [this.state.posItem.itemNum]
        }
        let res = await XgRequest.inventoryFind(urlPar, this.props)
        console.log(res)
        if (res.code === '0'){
          // console.log(JSON.parse(res.content), JSON.parse(res.content)[0].inventoryMirrorBatchDetailDTOs)
          if (JSON.parse(res.content) && JSON.parse(res.content).length > 0) {
            this.setState({
              showOutLotNumDlg: true,
              dlgLotNums: JSON.parse(res.content)[0].inventoryMirrorBatchDetailDTOs
            })

            // if (Platform.OS === 'android') {
            // }
          } else {
            Toast.showShortCenter('该商品未查询到批次')
          }
        } else {
          Toast.showShortCenter(res.msg);
        }
      } else {
        let urlPar = {
          branchNum: this.props.branch.branchNum,
          supplierNums: [this.state.posItem.supplierNum],
          itemNum: this.state.posItem.itemNum,
          departmentNums: this.props.systemParams.departmentNum ? [this.props.systemParams.departmentNum] : null,
        }
        let res = await XgRequest.listItemLotNum(urlPar, this.props);
        if (res.code === '0'){
          console.log('代销批次', JSON.parse(res.content), urlPar)
          let dlgLotNums = [];
          if (this.props.systemParams.agentLockSellerEnable && JSON.parse(res.content) && JSON.parse(res.content).length > 0) {
            for (let i = 0; i < JSON.parse(res.content).length; i++) {
              let dlgLotNum = JSON.parse(res.content)[i]
              if (dlgLotNum.agentOrderDetailSeller === this.props.systemParams.branchUserDTO.userDisplayName) {
                dlgLotNums.push(dlgLotNum)
              }
            }
          } else {
            dlgLotNums = JSON.parse(res.content)
          }

          console.log('dlgLotNums', dlgLotNums)
          if (dlgLotNums && dlgLotNums.length > 0) {
            this.setState({
              showOutLotNumDlg: true,
              dlgLotNums: dlgLotNums
            })

          }
        } else {
          Toast.showShortCenter(res.msg);
        }
      }
    } catch (e) {
      console.log(e);
    }
  }
  // 选择批次号
  selectInBatch(){
    this.searchInLotNum()
    this.setState({
        showInLotNumDlg:true,
    })
  }
  selectOutBatch(){
    this.searchOutLotNum()
    this.setState({
        showOutLotNumDlg:true,
    })
  }

  
  selectinPosItemn(agentOrderDetail){
    console.log('agentOrderDetail',agentOrderDetail)
  let orderDetail = this.state.inPosItem;
  console.log(orderDetail)
  let inventory = 0;
  if ('购销' === orderDetail.itemMode) {
    orderDetail.inorderDetailLotNum = agentOrderDetail.inventoryBatchLotNum
    inventory = agentOrderDetail.inventoryBatchQty
    if (orderDetail.orderDetailAssistUnit) {
      inventory = agentOrderDetail.inventoryBatchAssistQty
    }
  } else {
    if (agentOrderDetail.agentOrderDetailLotNum) {
      orderDetail.inorderDetailLotNum = agentOrderDetail.agentOrderDetailLotNum
    }

    if (agentOrderDetail.agentOrderDetailPackNum) {
      orderDetail.orderDetailPackNum = agentOrderDetail.agentOrderDetailPackNum
    }

    orderDetail.orderDetailAgentFid = agentOrderDetail.agentOrderFid
    orderDetail.orderDetailModeType = agentOrderDetail.agentOrderDetailModeType
    orderDetail.orderDetailModeRate = agentOrderDetail.agentOrderDetailModeRate
    orderDetail.orderDetailSeller = agentOrderDetail.agentOrderDetailSeller

    if (orderDetail.orderDetailAssistUnit) {
      inventory = Number(agentOrderDetail.agentOrderDetailAssistQty || 0) -  Number(agentOrderDetail.agentOrderDetailSaleAssistQty || 0) + Number(agentOrderDetail.agentOrderDetailAdjAssistQty || 0) + Number(agentOrderDetail.agentOrderDetailCheckAssistQty || 0)
    } else {
      inventory = Number(agentOrderDetail.agentOrderDetailQty || 0) - Number(agentOrderDetail.agentOrderDetailSaleQty || 0) + Number(agentOrderDetail.agentOrderDetailAdjQty || 0) + Number(agentOrderDetail.agentOrderDetailCheckQty || 0)
    }

  }

  this.setState({
    inPosItem: orderDetail,
    showInLotNumDlg: false,
    inventory: inventory.toFixed(2)
  })

  console.log('inPosItem',this.state.inPosItem)
}

selectOutPosItemn(agentOrderDetail){
    console.log('agentOrderDetail',agentOrderDetail)
  let inorderDetail = this.state.outPosItem;
  let inventory = 0;
  if ('购销' === inorderDetail.itemMode) {
    inorderDetail.orderDetailLotNum = agentOrderDetail.inventoryBatchLotNum
    inventory = agentOrderDetail.inventoryBatchQty
    console.log('orderDetail',inorderDetail)
    if (inorderDetail.orderDetailAssistUnit) {
      inventory = agentOrderDetail.inventoryBatchAssistQty
    }
  } else {
    if (agentOrderDetail.agentOrderDetailLotNum) {
      inorderDetail.orderDetailLotNum = agentOrderDetail.agentOrderDetailLotNum
    }

    if (agentOrderDetail.agentOrderDetailPackNum) {
      inorderDetail.orderDetailPackNum = agentOrderDetail.agentOrderDetailPackNum
    }

    inorderDetail.orderDetailAgentFid = agentOrderDetail.agentOrderFid
    inorderDetail.orderDetailModeType = agentOrderDetail.agentOrderDetailModeType
    inorderDetail.orderDetailModeRate = agentOrderDetail.agentOrderDetailModeRate
    inorderDetail.orderDetailSeller = agentOrderDetail.agentOrderDetailSeller

    if (inorderDetail.orderDetailAssistUnit) {
      inventory = Number(agentOrderDetail.agentOrderDetailAssistQty || 0) -  Number(agentOrderDetail.agentOrderDetailSaleAssistQty || 0) + Number(agentOrderDetail.agentOrderDetailAdjAssistQty || 0) + Number(agentOrderDetail.agentOrderDetailCheckAssistQty || 0)
    } else {
      inventory = Number(agentOrderDetail.agentOrderDetailQty || 0) - Number(agentOrderDetail.agentOrderDetailSaleQty || 0) + Number(agentOrderDetail.agentOrderDetailAdjQty || 0) + Number(agentOrderDetail.agentOrderDetailCheckQty || 0)
    }

    // console.log(agentOrderDetail, inventory)
  }

  this.setState({
    outPosItem: inorderDetail,
    showOutLotNumDlg: false,
    inventory: inventory.toFixed(2)
  })

  console.log('outPosItem',this.state.outPosItem)
}

  
  
  render() {
    return (
      <SafeAreaView style={{flex: 1, backgroundColor: 'white'}}>
        <Header title={this.state.titleName} 
          leftClick={() => this.navigation.goBack()} 
        />
        <View style={{marginTop:15}}></View>
        <View style={{flex: 1}}>
        <Separator />
        {
            <View>
              <View style={[styles.rowFlex]}>
                <TextInputLine textTitle='批次号' placeholder='点此选择批次'
                  ref={5}
                  onFocus={() => {}}
                  onSubmitEditing={() => {}}
                  linewrap={{flex: 1}}
                  textTitleStyle={{fontSize:15,width: 80}}
                  maxLength= {11}
                  ifCheckCode={true}
                  isSelectedInput={true}
                  onPress={()=>{this.selectInBatch()}}
                  checkTitleStyle={[styles.titleStyle, {marginRight: 5, width: null}]}
                  value={this.state.inPosItem.inorderDetailLotNum}
                />
              </View>
              <Separator />
            </View>
          }
          {
            <View>
            <View style={[styles.rowFlex]}>
              <TextInputLine textTitle='转出货位' placeholder='转出货位'
                linewrap={{flex: 1}}
                textTitleStyle={{fontSize:15,width: 80}}
                keyboardType='numeric'
                maxLength= {11}
                ifCheckCode={true}
                ref={3}
                onFocus={() => {}}
                onSubmitEditing={() => {}}
                value={''}
                onChangeText={() => {}}
                checkTitleStyle={[styles.titleStyle, {marginRight: 10, width: null}]}
              />
            </View>
            <Separator />
          </View>
          }
          {
            <View>
              <View style={[styles.rowFlex]}>
                <TextInputLine textTitle='转入批次' placeholder='点此选择批次'
                  ref={5}
                  onFocus={() => {}}
                  onSubmitEditing={() => {}}
                  linewrap={{flex: 1}}
                  textTitleStyle={{fontSize:15,width: 80}}
                  maxLength= {11}
                  ifCheckCode={true}
                  isSelectedInput={true}
                  onPress={()=>{this.selectOutBatch(this.state.posItem)}}
                  checkTitleStyle={[styles.titleStyle, {marginRight: 5, width: null}]}
                    value={this.state.outPosItem.orderDetailLotNum}
                    // value={''}
                />
              </View>
              <Separator />
            </View>
          }
          {
            <View>
            <View style={[styles.rowFlex]}>
              <TextInputLine textTitle='转入货位' placeholder='转入货位'
                linewrap={{flex: 1}}
                textTitleStyle={{fontSize:15,width: 80}}
                keyboardType='numeric'
                maxLength= {11}
                ifCheckCode={true}
                ref={3}
                onFocus={() => {}}
                onSubmitEditing={() => {}}
                value={''}
                onChangeText={() => {}}
                checkTitleStyle={[styles.titleStyle, {marginRight: 10, width: null}]}
              />
            </View>
            <Separator />
          </View>
          }
          {
            <View>
              <View style={[styles.rowFlex]}>
                <TextInputLine textTitle='转出数量' placeholder='转出数量'
                  linewrap={{flex: 1}}
                  textTitleStyle={{fontSize:15,width: 80}}
                  keyboardType='numeric'
                  maxLength= {11}
                  ifCheckCode={true}
                  checkCodeTitle={'件'}
                  ref={3}
                  onFocus={() => {}}
                  onSubmitEditing={() => {}}
                  value={''}
                  onChangeText={() => {}}
                  checkTitleStyle={[styles.titleStyle, {marginRight: 10, width: null}]}
                />
              </View>
              <Separator />
            </View>
          }
          {
            <View>
              <View style={[styles.rowFlex]}>
                <TextInputLine textTitle='转出重量' placeholder='转出重量'
                  linewrap={{flex: 1}}
                  textTitleStyle={{fontSize:15,width: 80}}
                  keyboardType='numeric'
                  maxLength= {11}
                  ifCheckCode={true}
                  checkCodeTitle={'公斤'}
                  ref={3}
                  onFocus={() => {}}
                  onSubmitEditing={() => {}}
                  value={''}
                  onChangeText={() => {}}
                  checkTitleStyle={[styles.titleStyle, {marginRight: 10, width: null}]}
                />
              </View>
              <Separator />
            </View>
          }
          {
            <View>
              <View style={[styles.rowFlex]}>
                <TextInputLine textTitle='备注' placeholder='备注'
                  linewrap={{flex: 1}}
                  textTitleStyle={{fontSize:15,width: 80}}
                  keyboardType='numeric'
                  maxLength= {11}
                  ifCheckCode={true}
                  ref={3}
                  onFocus={() => {}}
                  onSubmitEditing={() => {}}
                  value={''}
                  onChangeText={() => {}}
                  checkTitleStyle={[styles.titleStyle, {marginRight: 10, width: null}]}
                />
              </View>
              <Separator />
            </View>
          }
        </View>
          <View style={{flexDirection: 'row'}}>
            <Button 
              style={[styles.btn, {backgroundColor: '#2f86ff', height: 50}]}
              onPress={() => {console.log('提交啦')}}
              titleStyle={{color: 'white',fontSize:18}}
              title={'提交'}
            />
          </View>


          {/* 转出批次 */}
          <DlgView 
          show={this.state.showInLotNumDlg}
          titleText='选择批次'
          onClickCancel={(show) => this.setState({showInLotNumDlg: show})}
          renderItem={
            <FlatList
              data={this.state.dlgLotNums}
              extraData={this.state}
              keyExtractor={(item, index) => index.toString()}
              renderItem={({item}) => 
                <View>
                  <TouchableOpacity 
                    style={[styles.center, {backgroundColor: 'white', flexDirection: 'row', justifyContent: 'space-around', height: 50}]}
                    onPress={() => this.selectinPosItemn(item)} 
                  >   
                    {
                      // item.agentOrderFid && 
                      // <Text style={{textAlign: 'center', flex: 3}}>{item.agentOrderFid}</Text>
                    }
                    <View style={{flex: 3}}>
                      
                      {
                        // item.agentOrderFid && 
                        // <Text style={{textAlign: 'center'}}> {item.agentOrderFid} </Text>
                      }
                      <Text style={{textAlign: 'center'}}>
                       {item.agentOrderDetailLotNum ? item.agentOrderDetailLotNum : item.inventoryBatchLotNum}
                      </Text>
  
                      {
                        item.agentOrderDetailPackNum ?
                        <Text style={{textAlign: 'center'}}> {item.agentOrderDetailPackNum} </Text>
                        :
                        null
                        // `(${item.agentOrderDetailPackNum})`
                      }
                    </View>
  
                    <Text style={{textAlign: 'center', flex: 1}}>
                      {
                        item.agentOrderFid ?
                        this.state.posItem.orderDetailAssistUnit ?
                          (Number(item.agentOrderDetailAssistQty || 0) - Number(item.agentOrderDetailSaleAssistQty || 0) + Number(item.agentOrderDetailAdjAssistQty || 0) + Number(item.agentOrderDetailCheckAssistQty || 0)).toFixed(2)
                          :
                          (Number(item.agentOrderDetailQty || 0) - Number(item.agentOrderDetailSaleQty || 0) + Number(item.agentOrderDetailAdjQty || 0) + Number(item.agentOrderDetailCheckQty || 0)).toFixed(2)
                        :
                        this.state.posItem.orderDetailAssistUnit ?
                          Number(item.inventoryBatchAssistQty).toFixed(2)
                          :
                          Number(item.inventoryBatchQty).toFixed(2)
                      }
                    </Text>
                    
                  </TouchableOpacity>
                  <Separator />
                </View>
              }
            />
          }
        />

        {/* 转入批次 */}
        <DlgView 
        show={this.state.showOutLotNumDlg}
        titleText='选择批次'
        onClickCancel={(show) => this.setState({showOutLotNumDlg: show})}
        renderItem={
          <FlatList
            data={this.state.dlgLotNums}
            extraData={this.state}
            keyExtractor={(item, index) => index.toString()}
            renderItem={({item}) => 
              <View>
                <TouchableOpacity 
                  style={[styles.center, {backgroundColor: 'white', flexDirection: 'row', justifyContent: 'space-around', height: 50}]}
                  onPress={() => this.selectOutPosItemn(item)} 
                >   
                  {
                    // item.agentOrderFid && 
                    // <Text style={{textAlign: 'center', flex: 3}}>{item.agentOrderFid}</Text>
                  }
                  <View style={{flex: 3}}>
                    
                    {
                      // item.agentOrderFid && 
                      // <Text style={{textAlign: 'center'}}> {item.agentOrderFid} </Text>
                    }
                    <Text style={{textAlign: 'center'}}>
                     {item.agentOrderDetailLotNum ? item.agentOrderDetailLotNum : item.inventoryBatchLotNum}
                    </Text>

                    {
                      item.agentOrderDetailPackNum ?
                      <Text style={{textAlign: 'center'}}> {item.agentOrderDetailPackNum} </Text>
                      :
                      null
                      // `(${item.agentOrderDetailPackNum})`
                    }
                  </View>

                  <Text style={{textAlign: 'center', flex: 1}}>
                    {
                      item.agentOrderFid ?
                      this.state.posItem.orderDetailAssistUnit ?
                        (Number(item.agentOrderDetailAssistQty || 0) - Number(item.agentOrderDetailSaleAssistQty || 0) + Number(item.agentOrderDetailAdjAssistQty || 0) + Number(item.agentOrderDetailCheckAssistQty || 0)).toFixed(2)
                        :
                        (Number(item.agentOrderDetailQty || 0) - Number(item.agentOrderDetailSaleQty || 0) + Number(item.agentOrderDetailAdjQty || 0) + Number(item.agentOrderDetailCheckQty || 0)).toFixed(2)
                      :
                      this.state.posItem.orderDetailAssistUnit ?
                        Number(item.inventoryBatchAssistQty).toFixed(2)
                        :
                        Number(item.inventoryBatchQty).toFixed(2)
                    }
                  </Text>
                  
                </TouchableOpacity>
                <Separator />
              </View>
            }
          />
        }
      />
      </SafeAreaView>
    );
  }
}

// 将 store 中的状态映射（map）到当前组件的 props 中
function mapStateToProps(state) {
  return { appUser: state.reducers.appUser, 
    branch: state.reducers.branch, 
    systemParams: state.reducers.systemParams,
  };
}

// 将 actions 中定义的方法映射到当前组件的 props 中
function mapDispatchToProps(dispatch) {
return bindActionCreators(actionCreators, dispatch);
}

// 将 store 和 当前组件连接（connect）起来
export default connect(mapStateToProps, mapDispatchToProps)(kuneidiaoboBook);